#!/usr/bin/env bash
#   packhook : a simple pacman hooks administrator
#
#   Copyright (c) 2016 papajoker <papajoke@archlinux.info>
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#set -x
declare -r pkgname='packhook'
declare -r version=0.1.3

declare -A hooks
declare -r CG='\033[0m\033[32m'
declare -r CR='\033[0m\033[31m'
declare -r CE='\033[0m'

declare -r hookdirusr='/usr/share/libalpm/hooks/'
hookdir=$(awk -F'=' '/^HookDir/ { print $2}' /etc/pacman.conf)
[[ -z "${hookdir}" ]] && hookdir='/etc/pacman.d/hooks/'

declare -r EDITOR="${EDITOR:-nano}"
unset DESCRIPTIONS ONLYFILES ONLYPACKAGES PREINST POSTINST

########## functions ##########

usage() {
	echo -e "Usage: ${pkgname} [-lfpbe] {command} \"hook_name\" "
	echo -e "cat\nedit\nenable\ndisable\ncreate"
    echo -e "\noptions:\n\t-l : show Descriptions"
    echo -e "\t-f : show only target Files"
    echo -e "\t-p : show only target Packages"
    echo -e "\t-b : show only pre-install"
    echo -e "\t-e : show only post-install"
} 

runsudo(){
    (($EUID != 0)) && sudo "$@" || "$@"
}

goodext(){
    declare fileh="$1" ext=${2:-hook}
    [[ "${fileh##*.}" == "${ext}" ]] && return 0
    return 1
}

list(){
    declare dir="$1" fileh=''
    for fileh in $(find "${dir}" -maxdepth 1 -type f -printf "%f\n"); do
        hooks[${fileh%.*}]="${dir}${fileh}"
    done
}

listing(){
    list "${hookdir}"
    list "${hookdirusr}"
}

function yesno {
    declare response=''
    while read -r -p "${1} ? [y/n]: " response; do
        response=${response^^}
        [[ "${response}" == "N" ]] && return 1 
        [[ "${response}" == "Y" ]] && break
    done
    return 0
}

hooks.view(){
    declare hook='' pre='' desc=''
    declare -i tab=16 i=0
    declare sorts=($(echo ${!hooks[@]} | sed 's/ /\n/g' | sort))
    for i in "${!sorts[@]}"; do
        hook="${sorts[$i]}"
        if ((ONLYFILES)); then
            if [[ -z $(grep -i "Type.*File" "${hooks[$hook]}") ]]; then
                unset "sorts[$i]"
                continue
            fi
        fi
        if ((ONLYPACKAGES)); then
            if [[ -z $(grep -i "Type.*Package" "${hooks[$hook]}") ]]; then
                unset "sorts[$i]"
                continue
            fi
        fi
        if ((PREINST)); then
            if [[ -z $(grep -i "When.*PreTransaction" "${hooks[$hook]}") ]]; then
                unset "sorts[$i]"
                continue
            fi
        fi
        if ((POSTINST)); then
            if [[ -z $(grep -i "When.*PostTransaction" "${hooks[$hook]}") ]]; then
                unset "sorts[$i]"
                continue
            fi
        fi
        (( "${#hook}" > tab )) && tab=${#hook}
    done

    for hook in "${sorts[@]}"; do
        (goodext "${hooks[$hook]}") && pre="$CG" || pre="$CR"
        if ((DESCRIPTIONS)); then
            desc=$(awk -F'=' '/^Desc/ {print $2}' "${hooks[$hook]}")
            [ -z "$desc" ] && desc="${hooks[$hook]:1}"
        else
            desc="${hooks[$hook]:1}"
        fi

        printf "${pre}●$CE %-${tab}s  %s\n" "${hook}" "$desc"
    done
}

hook.view(){
    declare hook="$1" fileh='' pre='' hookbin=''
    fileh="${hooks[${hook}]}"
    [ -r "${fileh}" ] || exit 98
    (goodext "${fileh}") && pre="$CG" || pre="$CR"
    echo -e "$pre#${fileh}$CE"
    cat "${fileh}"
    
    hookbin=$(awk -F'=' '/^Exec/ { print $2}' "${fileh}" | xargs)
    hookbin="${hookbin%% *}"
    if [[ -r "${hookbin}" && $(file -bi "${hookbin}") =~ 'text' ]]; then
        echo -e "\n$pre#${hookbin}$CE"
        cat "${hookbin}" 
    fi
}

hook.edit(){
    declare hook="$1"
    if [[ -f "${hooks[${hook}]}" && ! "${hooks[${hook}]}" =~ "${hookdirusr}" ]]; then
        declare hookbin=$(awk -F= '/^Exec/ { print $2}' "${hooks[${hook}]}" | xargs)
        hookbin="${hookbin%% *}"
        if [[ $(file -bi "${hookbin}") =~ 'text' ]]; then
            runsudo "${EDITOR}" "${hooks[${hook}]}" "$hookbin"
        else
            runsudo "${EDITOR}" "${hooks[${hook}]}"
        fi
    fi
}

hook.setstate(){
   declare hook="$1" fileh=''
   fileh="${hooks[${hook}]}"
   if [[ "$2" == "enable" ]]; then
      (goodext "${fileh}") && return 0
      runsudo mv "${fileh}" "${fileh}.hook"
   else
      (goodext "${fileh}") || return 0
      runsudo mv "${fileh}" "${fileh%.*}"
   fi
   listing
   hooks.view
}

hook.create(){
model="[Trigger]
Operation = Install
Operation = Upgrade
Operation = Remove
Type = %s
%s

[Action]
Description = %s
When = %sTransaction
Exec = /usr/bin/true
%s
%s"
    declare post="Post" fail='' list='' desc='' type='Package' target='' t=''
    declare -a targets
    
    declare hook="$1"
    if [ -z "${hook}" ]; then
        read -r -p "Hook name: " hook;
    fi
    hook=${hook,,}
    if [[ "${hooks[$hook]}" != '' ]] &>/dev/null; then
        echo "Error: hook \"${hook}\" exist"
        return 97
    fi
    
    read -r -p "Description: " desc;
    (yesno "On Packages") || type='File'

    echo "Target(s) (*=all):"
    while read -r t; do
        [ -z "${t}" ] && break
        [[ "${t:0:1}" == '/' ]]  && t=${t#\/}
        [[ "${t:0:2}" == '!/' ]] && t=${t/\//}
        target="${target}Target = ${t}\n"
    done
    target=$(echo -e "${target}")
    
    if (! yesno "Post transaction"); then
        post='Pre'
        (yesno "fail if error") && fail='AbortOnFail'
    fi
    
    (yesno "Paste targets in stdin") && list='NeedsTargets'
    runsudo touch "${hookdir}${hook}.hook"
    printf "$model" "${type}" "${target}" "${desc}" "${post}" "${list}" "${fail}" | sudo tee "${hookdir}${hook}.hook" 1>/dev/null
    listing
    hook.edit "${hook}"
}

########## run ##########

listing
if [[ -n "$2" && "$1" != "create" && "${1:0:1}" != "-" ]]; then
    [ -f "${hooks[$2]}" ] &>/dev/null || { echo "hook not found"; exit 99; }
    hook="$2"
fi

#if [[ "$#" == "1" && "${1:0:1}" == "-" ]]; then

    explode_args() {
        unset OPTS
        local arg=$1 key value

        while [[ $arg ]]; do
            [[ $arg = "--" ]] && OPTS+=("$@") && break;

            # Short options
            if [[ ${arg:0:1} = "-" && ${arg:1:1} != "-" ]]; then
                OPTS+=("-${arg:1:1}")
                (( ${#arg} > 2 )) && arg="-${arg:2}" || { shift; arg=$1; }
            # Long options
            elif [[ ${arg:0:2} = "--" ]]; then
                # Split argument at '=' :
                # e.g --foo=bar -> key=--foo, value=bar
                key=${arg%%=*}; value=${arg#*=}
                OPTS+=("$key")
                [[ $key != $value ]] && OPTS+=("$value")
                shift; arg=$1
            else
                OPTS+=("$arg"); shift; arg=$1
            fi
        done
    }


    explode_args "$@"
    for ((i = 0; i < "${#OPTS[@]}"; i++)); do
        case ${OPTS[$i]} in
            -l | --desc ) DESCRIPTIONS=1;;
            -p | --pkg) ONLYPACKAGES=1;;
            -f | --file) ONLYFILES=1;;
            -b | --begin) PREINST=1;;
            -e | --end) POSTINST=1;;
        esac
    done
    unset OPTS
#fi

case "$1" in
            cat)  hook.view "${hook}";;
           edit)  hook.edit "${hook}";;
         create)  hook.create "$2";;
   enable|start)  hook.setstate "${hook}" enable;;
   disable|stop)  hook.setstate "${hook}" disable;;
             -h|--help)  usage;;
              *)  hooks.view
esac
